-- Script para configurar políticas RLS para certificados en el bucket product-images
-- Ejecutar en Supabase SQL Editor

-- 1. Verificar que el bucket product-images existe
-- (Los buckets se crean desde el dashboard de Supabase)

-- 2. Configurar políticas RLS específicas para la carpeta certificados
-- Permitir que los coaches suban certificados en la carpeta certificados
CREATE POLICY "Coaches can upload certifications" ON storage.objects
FOR INSERT WITH CHECK (
  bucket_id = 'product-images' AND
  (storage.foldername(name))[1] = 'certificados' AND
  auth.role() = 'authenticated' AND
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE id = auth.uid() AND role = 'coach'
  )
);

-- Permitir que los coaches vean sus propias certificaciones
CREATE POLICY "Coaches can view their certifications" ON storage.objects
FOR SELECT USING (
  bucket_id = 'product-images' AND
  (storage.foldername(name))[1] = 'certificados' AND
  auth.role() = 'authenticated' AND
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE id = auth.uid() AND role = 'coach'
  )
);

-- Permitir que los coaches actualicen sus propias certificaciones
CREATE POLICY "Coaches can update their certifications" ON storage.objects
FOR UPDATE USING (
  bucket_id = 'product-images' AND
  (storage.foldername(name))[1] = 'certificados' AND
  auth.role() = 'authenticated' AND
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE id = auth.uid() AND role = 'coach'
  )
);

-- Permitir que los coaches eliminen sus propias certificaciones
CREATE POLICY "Coaches can delete their certifications" ON storage.objects
FOR DELETE USING (
  bucket_id = 'product-images' AND
  (storage.foldername(name))[1] = 'certificados' AND
  auth.role() = 'authenticated' AND
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE id = auth.uid() AND role = 'coach'
  )
);

-- 3. Permitir acceso público a las certificaciones (para que se puedan ver en el frontend)
CREATE POLICY "Public can view certifications" ON storage.objects
FOR SELECT USING (
  bucket_id = 'product-images' AND
  (storage.foldername(name))[1] = 'certificados'
);

-- 4. Verificar que las políticas se crearon correctamente
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'objects' 
  AND schemaname = 'storage'
  AND policyname LIKE '%certification%'
ORDER BY policyname;

-- 5. Función para limpiar certificaciones huérfanas (opcional)
CREATE OR REPLACE FUNCTION cleanup_orphaned_certifications()
RETURNS void AS $$
BEGIN
  -- Eliminar archivos de certificaciones que no tienen registro en la base de datos
  DELETE FROM storage.objects 
  WHERE bucket_id = 'product-images' 
    AND (storage.foldername(name))[1] = 'certificados'
    AND NOT EXISTS (
      SELECT 1 FROM coach_certifications 
      WHERE file_path = name
    );
END;
$$ LANGUAGE plpgsql;

-- 6. Comentarios sobre la estructura de archivos
-- Los certificados se guardan con la siguiente estructura:
-- product-images/certificados/{user_id}_{timestamp}_{certification_name}.pdf
-- 
-- Ejemplo: product-images/certificados/b16c4f8c-f47b-4df0-ad2b-13dcbd76263f_1756687936193_Personal_Trainer_Certification.pdf
