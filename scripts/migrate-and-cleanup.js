const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno no encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function migrateAndCleanup() {
  console.log('üîÑ Migrando archivos importantes y limpiando buckets...')
  
  try {
    // Listar buckets existentes
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()
    
    if (listError) {
      console.error('‚ùå Error listando buckets:', listError)
      return
    }
    
    console.log('üì¶ Buckets existentes:')
    buckets.forEach(bucket => {
      console.log(`  - ${bucket.name} (${bucket.public ? 'p√∫blico' : 'privado'})`)
    })
    
    // Buckets a mantener
    const keepBuckets = ['user-media', 'product-media']
    const bucketsToCleanup = buckets.filter(bucket => !keepBuckets.includes(bucket.name))
    
    console.log('\nüéØ Estrategia:')
    console.log('‚úÖ Mantener: user-media, product-media')
    console.log('üóëÔ∏è Limpiar:', bucketsToCleanup.map(b => b.name).join(', '))
    
    // Migrar archivos importantes de product-images a product-media
    const productImagesBucket = buckets.find(b => b.name === 'product-images')
    if (productImagesBucket) {
      console.log('\nüì¶ Migrando archivos de product-images a product-media...')
      
      try {
        // Listar archivos en product-images
        const { data: files, error: listFilesError } = await supabase.storage
          .from('product-images')
          .list('', { limit: 100 })
        
        if (listFilesError) {
          console.log(`  ‚ö†Ô∏è Error listando archivos: ${listFilesError.message}`)
        } else if (files && files.length > 0) {
          console.log(`  üìÅ Archivos encontrados: ${files.length}`)
          
          // Migrar archivos importantes
          for (const file of files.slice(0, 5)) { // Solo los primeros 5 para no sobrecargar
            if (file.name && !file.name.includes('/')) { // Solo archivos en la ra√≠z
              console.log(`  üì§ Migrando: ${file.name}`)
              
              try {
                // Descargar archivo
                const { data: downloadData, error: downloadError } = await supabase.storage
                  .from('product-images')
                  .download(file.name)
                
                if (downloadError) {
                  console.log(`    ‚ö†Ô∏è Error descargando: ${downloadError.message}`)
                  continue
                }
                
                // Determinar nuevo path
                let newPath
                if (file.name.includes('video') || file.name.includes('.mov') || file.name.includes('.mp4')) {
                  newPath = `videos/products/${file.name}`
                } else if (file.name.includes('image') || file.name.includes('.jpg') || file.name.includes('.png')) {
                  newPath = `images/products/${file.name}`
                } else {
                  newPath = `misc/${file.name}`
                }
                
                // Subir a product-media
                const { error: uploadError } = await supabase.storage
                  .from('product-media')
                  .upload(newPath, downloadData, {
                    cacheControl: '3600',
                    upsert: true
                  })
                
                if (uploadError) {
                  console.log(`    ‚ö†Ô∏è Error subiendo: ${uploadError.message}`)
                } else {
                  console.log(`    ‚úÖ Migrado: ${file.name} ‚Üí ${newPath}`)
                }
                
              } catch (error) {
                console.log(`    ‚ö†Ô∏è Error procesando ${file.name}:`, error.message)
              }
            }
          }
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error accediendo a product-images:`, error.message)
      }
    }
    
    // Limpiar buckets vac√≠os
    console.log('\nüßπ Limpiando buckets vac√≠os...')
    
    for (const bucket of bucketsToCleanup) {
      console.log(`\nüîç Verificando bucket '${bucket.name}'...`)
      
      try {
        // Listar archivos
        const { data: files, error: listFilesError } = await supabase.storage
          .from(bucket.name)
          .list('', { limit: 1 })
        
        if (listFilesError) {
          console.log(`  ‚ö†Ô∏è Error listando archivos: ${listFilesError.message}`)
        } else if (files && files.length === 0) {
          console.log(`  üìÅ Bucket vac√≠o, eliminando...`)
          
          const { error: deleteError } = await supabase.storage.deleteBucket(bucket.name)
          
          if (deleteError) {
            console.log(`  ‚ùå Error eliminando: ${deleteError.message}`)
          } else {
            console.log(`  ‚úÖ Bucket '${bucket.name}' eliminado`)
          }
        } else {
          console.log(`  üìÅ Bucket contiene archivos (${files?.length || 0}), saltando...`)
          console.log(`  ‚ÑπÔ∏è Nota: Los archivos en ${bucket.name} no se migrar√°n autom√°ticamente`)
          console.log(`  ‚ÑπÔ∏è Puedes migrarlos manualmente si son importantes`)
        }
        
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error procesando bucket '${bucket.name}':`, error.message)
      }
    }
    
    console.log('\nüéâ Limpieza completada')
    console.log('\nüìä Buckets finales:')
    console.log('‚úÖ user-media - Avatares, certificados y documentos de usuarios')
    console.log('‚úÖ product-media - Im√°genes y videos de productos y ejercicios')
    console.log('\n‚ö†Ô∏è Nota: Algunos buckets con archivos no se pudieron eliminar')
    console.log('‚ö†Ô∏è Puedes eliminarlos manualmente desde el dashboard de Supabase si no contienen archivos importantes')
    
  } catch (error) {
    console.error('‚ùå Error en migraci√≥n:', error)
  }
}

migrateAndCleanup()
