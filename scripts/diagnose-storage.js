const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç DIAGN√ìSTICO DE SUPABASE STORAGE')
console.log('=====================================')

// Verificar variables de entorno
console.log('\nüìã Variables de entorno:')
console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ Presente' : '‚ùå Faltante')
console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Presente' : '‚ùå Faltante')
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ Presente' : '‚ùå Faltante')

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno faltantes')
  process.exit(1)
}

// Crear cliente con service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function diagnoseStorage() {
  try {
    console.log('\nüîç Verificando conectividad con Supabase...')
    
    // Test 1: Verificar autenticaci√≥n
    console.log('\n1Ô∏è‚É£ Verificando autenticaci√≥n...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError) {
      console.log('‚ö†Ô∏è Error de autenticaci√≥n (normal con service key):', authError.message)
    } else {
      console.log('‚úÖ Autenticaci√≥n OK')
    }
    
    // Test 2: Listar buckets
    console.log('\n2Ô∏è‚É£ Listando buckets existentes...')
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()
    
    if (listError) {
      console.error('‚ùå Error listando buckets:', listError)
      return
    }
    
    console.log('üì¶ Buckets encontrados:')
    buckets.forEach(bucket => {
      console.log(`  - ${bucket.name} (${bucket.public ? 'p√∫blico' : 'privado'})`)
    })
    
    // Test 3: Verificar permisos en cada bucket
    console.log('\n3Ô∏è‚É£ Verificando permisos de buckets...')
    
    for (const bucket of buckets) {
      console.log(`\nüîç Probando bucket: ${bucket.name}`)
      
      try {
        // Intentar listar archivos en el bucket
        const { data: files, error: listFilesError } = await supabase.storage
          .from(bucket.name)
          .list('', { limit: 1 })
        
        if (listFilesError) {
          console.log(`  ‚ùå Error listando archivos: ${listFilesError.message}`)
        } else {
          console.log(`  ‚úÖ Permisos OK - ${files?.length || 0} archivos encontrados`)
        }
        
        // Intentar subir un archivo de prueba
        console.log(`  üß™ Probando subida de archivo de prueba...`)
        const testContent = new Blob(['test content'], { type: 'text/plain' })
        const testFileName = `test-${Date.now()}.txt`
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from(bucket.name)
          .upload(testFileName, testContent, {
            cacheControl: '3600',
            upsert: false
          })
        
        if (uploadError) {
          console.log(`  ‚ùå Error subiendo archivo: ${uploadError.message}`)
        } else {
          console.log(`  ‚úÖ Subida exitosa: ${uploadData.path}`)
          
          // Limpiar archivo de prueba
          const { error: deleteError } = await supabase.storage
            .from(bucket.name)
            .remove([testFileName])
          
          if (deleteError) {
            console.log(`  ‚ö†Ô∏è Error eliminando archivo de prueba: ${deleteError.message}`)
          } else {
            console.log(`  üßπ Archivo de prueba eliminado`)
          }
        }
        
      } catch (error) {
        console.log(`  ‚ùå Error general con bucket ${bucket.name}:`, error.message)
      }
    }
    
    // Test 4: Verificar configuraci√≥n de red
    console.log('\n4Ô∏è‚É£ Verificando configuraci√≥n de red...')
    console.log('URL de Supabase:', supabaseUrl)
    console.log('Regi√≥n detectada:', supabaseUrl.includes('supabase.co') ? 'Supabase Cloud' : 'Self-hosted')
    
    // Test 5: Verificar pol√≠ticas RLS
    console.log('\n5Ô∏è‚É£ Verificando pol√≠ticas RLS...')
    console.log('‚ÑπÔ∏è Las pol√≠ticas RLS pueden afectar el acceso a Storage')
    console.log('‚ÑπÔ∏è Verifica en el dashboard de Supabase que las pol√≠ticas permitan acceso')
    
    console.log('\nüéâ Diagn√≥stico completado')
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error)
  }
}

diagnoseStorage()
