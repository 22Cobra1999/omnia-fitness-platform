CREATE TABLE IF NOT EXISTS activity_availability (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  activity_id BIGINT REFERENCES public.activities_base(id) ON DELETE CASCADE,
  availability_type TEXT NOT NULL, -- 'check_availability' or 'immediate_purchase'
  session_type TEXT NOT NULL, -- 'individual', 'group', 'workshop', 'program'
  available_slots INTEGER, -- For group/workshop, null for individual/program
  available_days TEXT[], -- Array of days, e.g., ['monday', 'tuesday']
  available_hours TEXT -- e.g., '10:00-17:00'
);

ALTER TABLE activity_availability ENABLE ROW LEVEL SECURITY;

-- Policies for activity_availability
DROP POLICY IF EXISTS "Allow read access to all activity_availability." ON activity_availability;
CREATE POLICY "Allow read access to all activity_availability." ON activity_availability
  FOR SELECT USING (TRUE);

DROP POLICY IF EXISTS "Coaches can manage their activity availability." ON activity_availability;
CREATE POLICY "Coaches can manage their activity availability." ON activity_availability
  FOR ALL USING (EXISTS (SELECT 1 FROM public.activities_base WHERE id = activity_id AND coach_id = auth.uid())) WITH CHECK (EXISTS (SELECT 1 FROM public.activities_base WHERE id = activity_id AND coach_id = auth.uid()));

DROP POLICY IF EXISTS "Admins can manage all activity availability." ON activity_availability;
CREATE POLICY "Admins can manage all activity availability." ON activity_availability
  FOR ALL USING (auth.uid() IN (SELECT user_id FROM public.user_roles WHERE role = 'admin')) WITH CHECK (auth.uid() IN (SELECT user_id FROM public.user_roles WHERE role = 'admin'));
