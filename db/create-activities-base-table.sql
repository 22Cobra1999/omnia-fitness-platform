CREATE TABLE IF NOT EXISTS activities_base (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  type TEXT NOT NULL, -- e.g., 'fitness', 'nutrition', 'consultation', 'program'
  difficulty TEXT, -- e.g., 'beginner', 'intermediate', 'advanced'
  price NUMERIC(10, 2) NOT NULL,
  coach_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  is_public BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  program_rating NUMERIC(2, 1),
  total_program_reviews INTEGER DEFAULT 0,
  coach_rating NUMERIC(2, 1) -- Denormalized from coaches table
);

ALTER TABLE activities_base ENABLE ROW LEVEL SECURITY;

-- Policies for activities_base
DROP POLICY IF EXISTS "Public activities are viewable by everyone." ON activities_base;
CREATE POLICY "Public activities are viewable by everyone." ON activities_base
  FOR SELECT USING (is_public = TRUE);

DROP POLICY IF EXISTS "Coaches can view and manage their own activities." ON activities_base;
CREATE POLICY "Coaches can view and manage their own activities." ON activities_base
  FOR ALL USING (auth.uid() = coach_id) WITH CHECK (auth.uid() = coach_id);

DROP POLICY IF EXISTS "Admins can manage all activities." ON activities_base;
CREATE POLICY "Admins can manage all activities." ON activities_base
  FOR ALL USING (auth.uid() IN (SELECT user_id FROM public.user_roles WHERE role = 'admin')) WITH CHECK (auth.uid() IN (SELECT user_id FROM public.user_roles WHERE role = 'admin'));

-- Allow clients to view all public activities
DROP POLICY IF EXISTS "Clients can view all public activities." ON activities_base;
CREATE POLICY "Clients can view all public activities." ON activities_base
  FOR SELECT USING (is_public = TRUE AND auth.uid() IN (SELECT user_id FROM public.user_roles WHERE role = 'client'));

-- Allow authenticated users to insert activities (e.g., coaches)
DROP POLICY IF EXISTS "Authenticated users can insert activities." ON activities_base;
CREATE POLICY "Authenticated users can insert activities." ON activities_base
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Allow authenticated users to update activities (e.g., coaches)
DROP POLICY IF EXISTS "Authenticated users can update activities." ON activities_base;
CREATE POLICY "Authenticated users can update activities." ON activities_base
  FOR UPDATE USING (auth.role() = 'authenticated');

-- Allow authenticated users to delete activities (e.g., coaches)
DROP POLICY IF EXISTS "Authenticated users can delete activities." ON activities_base;
CREATE POLICY "Authenticated users can delete activities." ON activities_base
  FOR DELETE USING (auth.role() = 'authenticated');
